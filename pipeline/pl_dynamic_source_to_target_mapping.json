{
	"name": "pl_dynamic_source_to_target_mapping",
	"properties": {
		"activities": [
			{
				"name": "Dynamic copy source to target mapping",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Save STM",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_adls_src",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Sql_vw_emp",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Get Metadata of source",
				"description": "Get Metadata of source",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_adls_src",
						"type": "DatasetReference"
					},
					"fieldList": [
						"itemName",
						"itemType",
						"structure"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "ForEach in source fields",
				"description": "retrieve each field's structure name and type.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Reset all source fields to False",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Metadata of source').output.structure",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Lookup source field exits or not",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "save source this field name",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "save source this field data type",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "IF NOT EXISTS (\n      SELECT src_col from metadata \n         WHERE \n         source_filename = '@{variables('var_sourcename')}'\n            AND     src_col = '@{variables('var_field_name')}'\n   )\nBEGIN\n  -- Alter target table schema\n  IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'emp' AND   COLUMN_NAME = '@{variables('var_field_name')}'   )\n    ALTER TABLE emp ADD @{item().name} NVARCHAR(max);\n  SELECT 'target altered'; -- return\n\n  -- insert field metadata and STM plan\n  INSERT INTO metadata\n(source_filename\n, src_col\n, src_dataType\n, src_col_activity\n, destination_schema\n, destination_table\n, dst_col\n, dst_dataType\n, dst_col_activity\n, mapping)\nVALUES\n(\n'@{variables('var_sourcename')}'\n, '@{variables('var_field_name')}'\n, '@{variables('var_field_type')}'\n, 1\n, 'dbo'\n, 'emp'\n, '@{variables('var_field_name')}'\n, 'NVARCHAR'\n, 1\n, '{\n  \"source\": {\n     \"name\": \"@{variables('var_field_name')}\",\n     \"type\": \"@{variables('var_field_type')}\",\n     \"physicalType\":\"@{variables('var_field_type')}\"\n  },\n  \"sink\": {\n     \"name\": \"@{variables('var_field_name')}\",\n     \"type\": \"nvarchar(max)\",\n     \"physicalType\":\"nvarchar(max)\"\n  } \n}'\n);\n  SELECT 'insert field metadata';-- return\nEND\nELSE\n    BEGIN\n      UPDATE metadata SET src_col_activity = 1 \n      WHERE source_filename = '@{variables('var_sourcename')}' \n            AND     src_col = '@{variables('var_field_name')}'\nselect 'this field actived'; -- return\nEND;",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "AzureSql_metadata_Table",
									"type": "DatasetReference"
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "save source this field name",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_field_name",
								"value": {
									"value": "@item().name",
									"type": "Expression"
								}
							}
						},
						{
							"name": "save source this field data type",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_field_type",
								"value": {
									"value": "@item().type",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "save source file name",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Metadata of source",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "var_sourcename",
					"value": {
						"value": "@activity('Get Metadata of source').output.itemName",
						"type": "Expression"
					}
				}
			},
			{
				"name": "lkp generate entire ETL mapping plan",
				"description": "Using the metadata table, generate the complete ETL mapping plan.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "ForEach in source fields",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select \nconcat(\n'{\"type\": \"TabularTranslator\",\n\"mappings\": [' \n, string_agg(mapping,',') \n,'],'\n,'\"typeConversion\": true,\"typeConversionSettings\": {\"allowDataTruncation\": false, \"treatBooleanAsNumber\": false}'\n) as stm\nfrom metadata\nwhere \n[source_filename] = '@{variables('var_sourcename')}' \nand [src_col_activity] = 1",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSql_metadata_Table",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Save STM",
				"description": "save the STM to variable \"var_mapping_plan\"",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "lkp generate entire ETL mapping plan",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "var_mapping_plan",
					"value": {
						"value": "@activity('lkp generate entire ETL mapping plan').output.firstRow.stm",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Reset all source fields to False",
				"description": "Reset the activity status of all source fields in the metadata table to False",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "save source file name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "UPDATE metadata SET\nsrc_col_activity = 0\nWHERE source_filename = '@{variables('var_sourcename')}';\nSELECT 1;",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSql_metadata_Table",
						"type": "DatasetReference"
					}
				}
			}
		],
		"variables": {
			"var_field_name": {
				"type": "String"
			},
			"var_field_type": {
				"type": "String"
			},
			"var_sourcename": {
				"type": "String"
			},
			"var_mapping_plan": {
				"type": "String"
			}
		},
		"annotations": []
	}
}